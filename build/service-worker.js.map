{"version":3,"sources":["service-worker.js"],"names":["CACHE_NAME","FILES_TO_CACHE","self","addEventListener","evt","console","log","waitUntil","caches","open","then","cache","addAll","skipWaiting","keys","keyList","Promise","all","map","key","delete","clients","claim","request","url","mode","respondWith","match","response","fetch"],"mappings":";AAAA,IAAMA,EAAa,UACbC,EAAiB,CACrB,MAGFC,KAAKC,iBAAiB,UAAW,SAACC,GAChCC,QAAQC,IAAI,2BAEZF,EAAIG,UACFC,OAAOC,KAAKT,GAAYU,KAAK,SAACC,GAErBA,OADPN,QAAQC,IAAI,4CACLK,EAAMC,OAAOX,MAIxBC,KAAKW,gBAGPX,KAAKC,iBAAiB,WAAY,SAACC,GACjCC,QAAQC,IAAI,4BAEZF,EAAIG,UACFC,OAAOM,OAAOJ,KAAK,SAACK,GACXC,OAAAA,QAAQC,IAAIF,EAAQG,IAAI,SAACC,GAC1BA,GAAAA,IAAQnB,EAEHQ,OADPH,QAAQC,IAAI,qCAAsCa,GAC3CX,OAAOY,OAAOD,SAM7BjB,KAAKmB,QAAQC,UAGfpB,KAAKC,iBAAiB,QAAS,SAACC,GAC9BC,QAAQC,IAAI,wBAAyBF,EAAImB,QAAQC,KAExB,aAArBpB,EAAImB,QAAQE,MAIhBrB,EAAIsB,YACFlB,OAAOmB,MAAMvB,EAAImB,SAASb,KAAM,SAAAkB,GACvBA,OAAAA,GAAYC,MAAMzB,EAAImB","file":"service-worker.js","sourceRoot":"..","sourcesContent":["const CACHE_NAME = 'test0.3';\nconst FILES_TO_CACHE = [\n  './'\n];\n\nself.addEventListener('install', (evt) => {\n  console.log('[ServiceWorker] Install');\n  // CODELAB: Precache static resources here.\n  evt.waitUntil(\n    caches.open(CACHE_NAME).then((cache) => {\n      console.log('[ServiceWorker] Pre-caching offline page');\n      return cache.addAll(FILES_TO_CACHE);\n    })\n  );\n\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (evt) => {\n  console.log('[ServiceWorker] Activate');\n  // CODELAB: Remove previous cached data from disk.\n  evt.waitUntil(\n    caches.keys().then((keyList) => {\n      return Promise.all(keyList.map((key) => {\n        if (key !== CACHE_NAME) {\n          console.log('[ServiceWorker] Removing old cache', key);\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n\n  self.clients.claim();\n});\n\nself.addEventListener('fetch', (evt) => {\n  console.log('[ServiceWorker] Fetch', evt.request.url);\n  // CODELAB: Add fetch event handler here.\n  if (evt.request.mode !== 'navigate') {\n    // Not a page navigation, bail.\n    return;\n  }\n  evt.respondWith(\n    caches.match(evt.request).then( response => {\n      return response || fetch(evt.request);\n    })\n      // fetch(evt.request)\n      //     .catch(() => {\n      //       return caches.open(CACHE_NAME)\n      //           .then((cache) => {\n      //             return cache.match('offline.html');\n      //           });\n      //     })\n  );\n});\n\n\n\n\n"]}